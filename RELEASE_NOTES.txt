
                            CSS4J RELEASE NOTES
                            ===================

Release 3.6.0 - July 30, 2021
-----------------------------

Release Highlights
------------------

* Build improvements.

  The Gradle build is now independent from css4j-dist.

* Color() function

  The color() function from Color Level 4 is now fully supported as a color.
  Previously, it was handled as a generic function.


Description
-----------
 This software contains Java(tm) classes covering CSS document style formatting.
Unless otherwise noted, this software is provided under a BSD-style licence
(see the LICENSE.txt file, and also LICENSES.txt for included files that have a
different licensing).

 The functionality in this library can be divided in the following areas:

- A CSSOM API very similar to the standard W3C CSS Object Model API, that allows
  accessing the CSS information (style sheets, inline styles, etc.) in a DOM
  Document, as well as getting computed styles for its elements.
- A CSS-enabled native DOM implementation.
- A DOM wrapper that can be used with an external DOM implementation.
- A device profile API to encapsulate target device-specific information.

 In separate modules you can find:

- A DOM4J backend (module css4j-dom4j) which uses documents and elements that
  extend those of dom4j (for those who are comfortable with dom4j).
- User agent helper classes, that enable the use of the library with correct
  cookie settings etc. (css4j-agent module).
- A few AWT helper classes (AWT module).


Java(tm) Runtime Environment requirements
-----------------------------------------
 All the classes in the binary package have been compiled with a Java compiler
set to 1.8 compiler compliance level, except the module-info file.

 Building the library requires JDK 15 or higher, although the resulting jar
files can be run with a 1.8 JRE.


W3C Compliance
--------------
 Some parts of the code may throw DOMExceptions that are not covered by the 
CSS Object Model specification. Those cases are documented in the code.

 The behaviour of the documents and sheets varies according to the 'compliance
mode' of the associated document (DTD-less documents are in 'quirks' mode).

 If your use case is broken due to non-conformant behaviour, please report.


CSS3 Support
------------
 CSS3 is partially supported by the base CSS interfaces, and is not supported 
by the experimental visual formatting model. The following table summarizes 
the basic support for setting/retrieving the main CSS level 3/4 features (other
specifications are also supported):
  ___________________________________________
 |    CSS Spec Name            |   Support   |
 |-----------------------------|-------------|
 | Background / Border         | Yes         |
 | Color                       | Partial (1) |
 | Media Queries               | Partial (2) |
 | Selectors                   | Yes         |
 | Transitions                 | Yes         |
 | Values                      | Yes         |
 | Properties and Values API   | Yes         |
 | Grid / Template / Alignment | Partial (3) |
 |_____________________________|_____________|
Notes:
 1) Level 3 is supported, level 4 partially.
 2) Event handling with addListener/removeListener is not supported, given that
the library's user is supposed to be in control of the CSSCanvas instances where
the information about such events should be available.
 3) Legacy gap properties (grid-row-gap, grid-column-gap, and grid-gap) are not
supported, although the longhands can be used if declared explicitly).


Using CSS4J
-----------
 The usage guide at the website and the Javadoc overviews of the different
packages can be a starting point for users. Unit tests may also be useful
in showing different uses of the library. Generally, the library will be used in
the context of a document object model tree, but stand-alone use of style
declarations and style sheets is also possible.


Software dependencies
=====================

 The build script fetches all the required dependencies for you, basically:

- The jclf-text (5.0.0 or higher) and jclf-linear3 (1.0.0 or higher) modules:
  https://sourceforge.net/projects/jclf

- The carte-util artifact; version 3.5.1 or higher is recommended:
  https://github.com/css4j/carte-util/releases

- The xml-dtd artifact; version 3.5.1 or higher is recommended:
  https://github.com/css4j/xml-dtd/releases

- The tokenproducer artifact; version 1.1.1 or higher is recommended:
  https://github.com/css4j/tokenproducer/releases

- The SLF4J package, which is a logging package. See http://www.slf4j.org/ 
  for more information.


 Optional packages:

To run the unit tests you need a recent version of JUnit 4. Tests also require
the validator.nu html5 parser:
    https://about.validator.nu/htmlparser/


Project Sites
=============
Project home: https://css4j.github.io/
Development site: https://github.com/css4j/css4j
