/*

 Copyright (c) 2021-2024, C. Amengual.

 Licensed under a BSD-style License. You can find the license here:
 https://css4j.github.io/LICENSE.txt

 */

// SPDX-License-Identifier: BSD-3-Clause

plugins {
	id 'java-library'
	id 'maven-publish'
	id 'checkstyle'
	id 'jacoco'
}

group = 'io.sf.carte'
version = '4.4'
description = 'css4j'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withJavadocJar()
	withSourcesJar()
	registerFeature('xmldtd') {
		usingSourceSet(sourceSets.main)
	}
	registerFeature('logging') {
		usingSourceSet(sourceSets.main)
	}
}

configurations {
	tests
}

dependencies {
	api 'io.sf.carte:carte-util:[3.6.0,)'
	implementation 'io.sf.carte:tokenproducer:[3.0,)'
	implementation 'io.sf.jclf:jclf-text:[5.0.0,)'
	implementation 'io.sf.jclf:jclf-linear3:[1.0.0,)'
	xmldtdImplementation 'io.sf.carte:xml-dtd:[4.2.1,)'
	loggingImplementation 'org.slf4j:slf4j-api:[1.7.28,)'

	testImplementation 'org.slf4j:slf4j-simple:[1.7.28,)'
	testImplementation 'nu.validator:htmlparser:1.4.16'
	// JUnit
	testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// ShorthandSetterTest requires JUnit 4
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.11.0'
	// Jazzzer
	testImplementation 'com.code-intelligence:jazzer-junit:0.22.1'
}

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
	maven {
		url "https://css4j.github.io/maven/"
		mavenContent {
			releasesOnly()
		}
		content {
			includeGroup 'io.sf.carte'
			includeGroup 'io.sf.jclf'
		}
	}
}

sourceSets {
	test {
		resources {
			excludes += ['NOTICE.txt']
		}
	}
}

test {
	useJUnitPlatform() {
		excludeTags 'Fuzz'
	}
}

checkstyle {
	toolVersion = '10.18.0'
}

tasks.compileJava {
	excludes += ['module-info.java']
	modularity.inferModulePath = false
}

tasks.register('compileModuleInfo', JavaCompile) {
	description = 'Compile module-info to Java 11 bytecode'
	dependsOn tasks.compileJava
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	source = sourceSets.main.java
	classpath = sourceSets.main.compileClasspath
	destinationDirectory = sourceSets.main.java.destinationDirectory
	modularity.inferModulePath = true
	includes = ['module-info.java']
}

classes.dependsOn compileModuleInfo

// Check bytecode version, in case some other task screws it
tasks.register('checkLegacyJava') {
	description = 'Check that classes are Java 8 bytecode (except module-info)'
	enabled = enabled && !project.getPluginManager().hasPlugin('eclipse')
	def classdir = sourceSets.main.output.classesDirs.files.stream().findAny().get()
	def classfiles = fileTree(classdir).matching({it.exclude('module-info.class')}).files
	doFirst() {
		classfiles.each {
			classfile ->
			def classbytes = classfile.bytes
			def bcversion = classbytes[6] * 128 + classbytes[7]
			if (bcversion != 52) {
				throw new GradleException("Bytecode on " + classfile.name +
					" is not valid Java 8. Version should be 52, instead is " + bcversion)
			}
		}
	}
}

classes.finalizedBy checkLegacyJava

// Copy jar files to 'jar' directory
tasks.register('copyJars', Copy) {
	description = 'Copy jar files to \'jar\' directory'
	dependsOn tasks.build
	dependsOn 'testsJar'
	include '**/*.jar'
	excludes = ['slf4j*.jar']
	from layout.buildDirectory.dir("libs")
	from configurations.runtimeClasspath
	into "${rootDir}/jar"
}

tasks.register('lineEndingConversion', CRLFConvert) {
	description 'Convert top-level files to Windows line endings'
	file "$rootDir/RELEASE_NOTES.md"
	file "$rootDir/UPGRADING.txt"
	file "$rootDir/CHANGES.txt"
}

tasks.register('lineEndingConvCopy', CRLFConvertCopy) {
	description 'Convert LICENSE and NOTICE to Windows line endings'
	from "$rootDir/LICENSE.txt"
	from "$rootDir/NOTICE.txt"
}

tasks.register('testLineEndingConvCopy', CRLFConvertCopy) {
	description 'Convert test NOTICE to Windows line endings'
	dependsOn testClasses
	from "$rootDir/src/test/resources/NOTICE.txt"
	prefix = 'test/'
}

jacocoTestReport {
	dependsOn test
}

tasks.register('cleanBuildSrc') {
	doLast {
		delete("$rootDir/buildSrc/build")
	}
}

tasks.named('clean') {
	finalizedBy('cleanBuildSrc')
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
	options.overview = 'src/main/resources/overview.html'
	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
}

tasks.withType(AbstractArchiveTask).configureEach {
	// Reproducible build
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	// Copy license file
	dependsOn lineEndingConvCopy
	from ("$buildDir/tmp/crlf/LICENSE.txt") {
		into 'META-INF'
	}
}

['jar', 'sourcesJar', 'javadocJar'].each {
	tasks.named(it) {
		from ("$buildDir/tmp/crlf/NOTICE.txt") {
			into 'META-INF'
		}
	}
}

tasks.register('testsJar', Jar) {
	dependsOn testLineEndingConvCopy
	archiveClassifier = 'tests'
	from(sourceSets.test.output)
	from ("$buildDir/tmp/crlf/test/NOTICE.txt") {
		into 'META-INF'
	}
	// Exclude Jazzer stuff
	exclude '**/CSSParserFuzzTestInputs'
}

tasks.register('testsSourceJar', Jar) {
	dependsOn testLineEndingConvCopy
	archiveClassifier = 'tests-sources'
	from(sourceSets.test.java)
	// Exclude Jazzer stuff
	exclude '**/CSSParserFuzzTestInputs'
}

build.dependsOn lineEndingConversion, testsJar, testsSourceJar

tasks.withType(AbstractPublishToMaven).configureEach {
	doFirst {
		if (JavaVersion.current() < JavaVersion.VERSION_11) {
			throw new GradleException('This project requires Java 11 or later to build');
		}
	}
}

tasks.withType(PublishToMavenRepository) { task ->
	doFirst {
		if (repository == publishing.repositories.getByName('mavenRepo')) {
			logger.lifecycle "Deploying artifacts to \"${it.repository.url}\""
		}
	}
}

tasks.register('testOn8', Test) {
	description = 'Runs tests on Java 8'
	dependsOn classes
	testClassesDirs = testing.suites.test.sources.output.classesDirs
	classpath = testing.suites.test.sources.runtimeClasspath
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(8)
	}

	useJUnitPlatform() {
		excludeTags 'Fuzz'
	}
}

tasks.register('fuzzer', Test) {
	environment 'JAZZER_FUZZ', '1'

	useJUnitPlatform() {
		includeTags 'Fuzz'
	}
}

tasks.withType(Test) {
	// Probably not needed
	defaultCharacterEncoding = 'UTF-8'
}

artifacts {
	tests testsJar
}

publishing {
	publications {
		maven(MavenPublication) {
			description = 'css4j core module'
			from(components.java)
			suppressAllPomMetadataWarnings()
			artifact testsJar
			artifact testsSourceJar
			pom {
				description = 'css4j core module'
				url = "https://css4j.github.io/"
				licenses {
					license {
						name = "BSD 3-clause license"
						url = "https://css4j.github.io/LICENSE.txt"
					}
				}
				scm {
					connection = "scm:git:https://github.com/css4j/css4j.git"
					developerConnection = "scm:git:git://git@github.com:css4j/css4j.git"
					url = "https://github.com/css4j/css4j"
				}
			}
		}
	}
	repositories {
		maven {
			name = 'mavenRepo'
			/*
			 * The following section applies to the 'publish' task:
			 *
			 * If you plan to deploy to a repository, please configure the
			 * 'mavenReleaseRepoUrl' and/or 'mavenSnapshotRepoUrl' properties
			 * (for example in GRADLE_USER_HOME/gradle.properties).
			 *
			 * Otherwise, Gradle shall create a 'build/repository' subdirectory
			 * at ${rootDir} and deploy there.
			 *
			 * Properties 'mavenRepoUsername' and 'mavenRepoPassword' can also
			 * be set (generally from command line).
			 */
			def releasesUrl
			def snapshotsUrl
			if (project.hasProperty('mavenReleaseRepoUrl') && project.mavenReleaseRepoUrl) {
				releasesUrl = mavenReleaseRepoUrl
			} else {
				releasesUrl = "${buildDir}/repository/releases"
			}
			if (project.hasProperty('mavenSnapshotRepoUrl') && project.mavenSnapshotRepoUrl) {
				snapshotsUrl = mavenSnapshotRepoUrl
			} else {
				snapshotsUrl = "${buildDir}/repository/snapshots"
			}
			url = version.endsWith('-SNAPSHOT') ? snapshotsUrl : releasesUrl
			if (project.hasProperty('mavenRepoUsername') &&
					project.hasProperty('mavenRepoPassword')) {
				credentials.username = mavenRepoUsername
				credentials.password = mavenRepoPassword
			}
		}
	}
}
