plugins {
	id 'java-library'
	id 'maven-publish'
	id 'de.jjohannes.extra-java-module-info' version '0.11'
	id 'jacoco'
}

group = 'io.sf.carte'
version = '1.3.1'
description = 'css4j'

java {
	sourceCompatibility = JavaVersion.VERSION_1_7
	targetCompatibility = JavaVersion.VERSION_1_7
	withJavadocJar()
	withSourcesJar()
	registerFeature('logging') {
		usingSourceSet(sourceSets.main)
	}
}

configurations {
	tests
	test8Implementation.extendsFrom implementation
}

dependencies {
	api 'io.sf.jclf:jclf-text:5.0.0'
	api 'io.sf.jclf:jclf-linear3:1.0.0'
	api 'commons-codec:commons-codec:[1.15,)'
	api 'org.w3c.css:sac:1.3'
	loggingImplementation 'org.slf4j:slf4j-api:[1.7.28,)'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'nu.validator:htmlparser:1.4.16'
	testImplementation 'org.apache.xmlgraphics:batik-css:1.14'
	testImplementation 'org.apache.xmlgraphics:batik-util:1.14'
	testImplementation 'org.apache.xmlgraphics:batik-i18n:1.14'
	testImplementation 'net.sourceforge.cssparser:cssparser:0.9.29'
	test8Implementation 'junit:junit:4.13.2'
	test8Implementation 'nu.validator:htmlparser:1.4.16'
	test8Implementation 'org.apache.xmlgraphics:batik-css:1.14'
	test8Implementation 'org.apache.xmlgraphics:batik-util:1.14'
	test8Implementation 'org.apache.xmlgraphics:batik-i18n:1.14'
	test8Implementation 'net.sourceforge.cssparser:cssparser:0.9.29'
}

extraJavaModuleInfo {
	failOnMissingModuleInfo.set(false)
	automaticModule('sac-1.3.jar', 'sac')
}

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
	maven {
		url "https://css4j.github.io/maven/"
		mavenContent {
			releasesOnly()
		}
		content {
			includeGroup 'io.sf.carte'
			includeGroup 'io.sf.jclf'
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs = ['src']
			includes += ["**/*.java"]
		}
		resources {
			srcDirs = ['src']
			excludes += ["**/*.java"]
		}
	}
	test {
		java {
			srcDirs = ['junit']
			includes += ["**/*.java"]
		}
		resources {
			srcDirs = ['junit']
			excludes += ["**/*.java"]
		}
	}
	test8 {
		java {
			srcDirs = ['junit']
			includes += ["**/*.java"]
		}
		resources {
			srcDirs = ['junit']
			excludes += ["**/*.java"]
		}
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

tasks.compileJava {
	excludes += ['module-info.java']
	modularity.inferModulePath = false
}

tasks.register('compileModuleInfo', JavaCompile) {
	description = 'Compile module-info to Java 11 bytecode'
	dependsOn tasks.compileJava
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	source = sourceSets.main.java
	classpath = sourceSets.main.compileClasspath
	destinationDirectory = sourceSets.main.java.destinationDirectory
	modularity.inferModulePath = true
	includes = ['module-info.java']
}

classes.dependsOn compileModuleInfo

// Check bytecode version, in case some other task screws it
tasks.register('checkLegacyJava') {
	description = 'Check that classes are Java 7 bytecode (except module-info)'
	def classdir = sourceSets.main.output.classesDirs.files.stream().findAny().get()
	def classfiles = fileTree(classdir).matching({it.exclude('module-info.class')}).files
	doFirst() {
		if (!classfiles.isEmpty()) {
			def classfile = classfiles.stream().findAny().get()
			if (classfile != null) {
				def classbytes = classfile.bytes
				def bcversion = classbytes[6] * 128 + classbytes[7]
				if (bcversion != 51) {
					throw new GradleException("Bytecode on " + classfile +
							" is not valid Java 7. Version should be 51, instead is " + bcversion)
				}
			}
		}
	}
}

classes.finalizedBy checkLegacyJava

// Copy jar files to 'jar' directory
tasks.register('copyJars', Copy) {
	description = 'Copy jar files to \'jar\' directory'
	dependsOn tasks.build
	dependsOn 'testsJar'
	include '**/*.jar'
	excludes = ['slf4j*.jar']
	from layout.buildDirectory.dir("libs")
	from configurations.runtimeClasspath
	into "${rootDir}/jar"
}

tasks.register('lineEndingConversion', CRLFConvert) {
	file "$rootDir/LICENSE.txt"
	file "$rootDir/LICENSES.txt"
	file "$rootDir/CHANGES.txt"
	file "$rootDir/RELEASE_NOTES.md"
}

jacocoTestReport {
	dependsOn test
}

tasks.register('cleanBuildSrc') {
	doLast {
		delete("$rootDir/buildSrc/build")
	}
}

tasks.named('clean') {
	finalizedBy('cleanBuildSrc')
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	failOnError false
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
	options.overview = 'src/overview.html'
	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
	options.links 'https://www.w3.org/2003/01/dom2-javadoc/'
	options.links 'https://www.w3.org/Style/CSS/SAC/doc/'
	options.links 'https://www.slf4j.org/apidocs/'
}

tasks.withType(AbstractArchiveTask).configureEach {
	// Reproducible build
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	// Copy license file
	dependsOn lineEndingConversion
	from ('LICENSE.txt') {
		into 'META-INF'
	}
	from ('LICENSES.txt') {
		into 'META-INF'
	}
}

tasks.withType(AbstractPublishToMaven).configureEach {
	doFirst {
		if (JavaVersion.current() < JavaVersion.VERSION_11) {
			throw new GradleException('This project requires Java 11 or later to build');
		}
	}
}

tasks.withType(PublishToMavenRepository) { task ->
	doFirst {
		if (repository == publishing.repositories.getByName('mavenRepo')) {
			logger.lifecycle "Deploying artifacts to \"${it.repository.url}\""
		}
	}
}

test {
	exclude '**/AllTests.class'
}

tasks.register('testOn8', Test) {
	description = 'Runs tests on Java 8'
	dependsOn classes
	testClassesDirs = sourceSets.test8.output.classesDirs
	exclude '**/AllTests.class'
	classpath += sourceSets.test8.runtimeClasspath
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

tasks.register('testsJar', Jar) {
	archiveClassifier = 'tests'
	from(sourceSets.test.output)
}

artifacts {
	tests testsJar
}

publishing {
	publications {
		maven(MavenPublication) {
			description = 'css4j core module'
			from(components.java)
			suppressAllPomMetadataWarnings()
			artifact(testsJar)
			pom {
				description = 'css4j core module'
				url = "https://github.com/css4j/css4j/"
				licenses {
					license {
						name = "BSD 3-clause license"
						url = "https://css4j.github.io/LICENSE.txt"
					}
				}
			}
		}
	}
	repositories {
		maven {
			name = 'mavenRepo'
			/*
			 * The following section applies to the 'publish' task:
			 *
			 * If you plan to deploy to a repository, please configure the
			 * 'mavenReleaseRepoUrl' and/or 'mavenSnapshotRepoUrl' properties
			 * (for example in GRADLE_USER_HOME/gradle.properties).
			 *
			 * Otherwise, Gradle shall create a 'build/repository' subdirectory
			 * at ${rootDir} and deploy there.
			 *
			 * Properties 'mavenRepoUsername' and 'mavenRepoPassword' can also
			 * be set (generally from command line).
			 */
			def releasesUrl
			def snapshotsUrl
			if (project.hasProperty('mavenReleaseRepoUrl') && project.mavenReleaseRepoUrl) {
				releasesUrl = mavenReleaseRepoUrl
			} else {
				releasesUrl = "${buildDir}/repository/releases"
			}
			if (project.hasProperty('mavenSnapshotRepoUrl') && project.mavenSnapshotRepoUrl) {
				snapshotsUrl = mavenSnapshotRepoUrl
			} else {
				snapshotsUrl = "${buildDir}/repository/snapshots"
			}
			url = version.endsWith('-SNAPSHOT') ? snapshotsUrl : releasesUrl
			if (project.hasProperty('mavenRepoUsername') &&
					project.hasProperty('mavenRepoPassword')) {
				credentials.username = mavenRepoUsername
				credentials.password = mavenRepoPassword
			}
		}
	}
}
